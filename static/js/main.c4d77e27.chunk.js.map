{"version":3,"sources":["components/paragraph/paragraph.js","components/focus/focus.js","components/form/form.js","App.js","serviceWorker.js","index.js"],"names":["Paragraph","FocusVisible","styled","div","Form","props","state","name","email","message","event","this","setState","target","value","preventDefault","alert","axios","method","url","data","then","response","status","resetForm","className","onSubmit","handleSubmit","bind","type","required","onChange","onNameChange","aria-describedby","onEmailChange","placeholder","rows","onMessageChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"gSAWeA,G,MARG,WACjB,OACC,oJ,yQCFF,IAUeC,E,MAVMC,EAAOC,IAAV,KCwFHC,E,kDApFd,WAAYC,GAAO,IAAD,8BACjB,cAAOA,IACFC,MAAQ,CACZC,KAAM,GACNC,MAAO,GACPC,QAAS,IALO,E,yDAQJC,GACZC,KAAKC,SAAS,CAACL,KAAMG,EAAMG,OAAOC,U,oCAGrBJ,GACbC,KAAKC,SAAS,CAACJ,MAAOE,EAAMG,OAAOC,U,sCAGpBJ,GACfC,KAAKC,SAAS,CAACH,QAASC,EAAMG,OAAOC,U,kCAIrCH,KAAKC,SAAS,CAACL,KAAK,GAAIC,MAAM,GAAIC,QAAS,O,mCAG/BC,GAAO,IAAD,OACnBA,EAAMK,iBACe,KAAlBJ,KAAKL,MAAMC,MAAkC,KAArBI,KAAKL,MAAMG,SAAmC,KAAnBE,KAAKL,MAAME,MAChEQ,MAAM,MAENC,IAAM,CACLC,OAAQ,OACRC,IAAK,oDACLC,KAAMT,KAAKL,QACTe,MAAK,SAACC,GACoB,YAAzBA,EAASF,KAAKG,QAChBP,MAAM,gBACN,EAAKQ,aAC6B,SAAzBF,EAASF,KAAKG,QACvBP,MAAM,+B,+BAOV,OACD,kBAAC,EAAD,CAAcS,UAAU,kCACvB,yBAAKA,UAAU,YACd,0BAAMP,OAAO,OAAOQ,SAAUf,KAAKgB,aAAaC,KAAKjB,OACpD,yBAAKc,UAAU,YACT,4CACA,2BACII,KAAK,OAAOC,SAAS,GACrBhB,MAAOH,KAAKL,MAAMC,KAClBwB,SAAUpB,KAAKqB,aAAaJ,KAAKjB,SAI3C,yBAAKc,UAAU,YACR,6CACF,2BAAOI,KAAK,QACNJ,UAAU,eACVQ,mBAAiB,YACjBnB,MAAOH,KAAKL,MAAME,MAClBuB,SAAUpB,KAAKuB,cAAcN,KAAKjB,SAG5C,yBAAKc,UAAU,YACX,8BACAU,YAAY,sBACZV,UAAU,WACVW,KAAK,IACLtB,MAAOH,KAAKL,MAAMG,QAClBsB,SAAUpB,KAAK0B,gBAAgBT,KAAKjB,SAExC,yBAAKc,UAAU,eACb,4BAAQI,KAAK,SAASJ,UAAU,cAAhC,kB,GA7Eaa,aCSJC,E,uKATb,OACA,6BACC,kBAAC,EAAD,MACC,kBAAC,EAAD,W,GALcD,a,MCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/C,c","file":"static/js/main.c4d77e27.chunk.js","sourcesContent":["import React from 'react';\nimport './paragraph.css'\n\nconst Paragraph = () => {\n\treturn (\n\t <h1>\n\t  Name a person of influence in the United Arab Emirates who inspires you and what classes you would take from them.\n\t  </h1>\n\t)\n}\n\nexport default Paragraph;","import styled from 'styled-components';\n\n\nconst FocusVisible = styled.div`\n&.js-focus-visible :focus:not(.focus-visible) {\n   outline: none;\n}\n&.js-focus-visible .focus-visible {\n   outline: none;\n   border: 3px solid #03e9f4;\n}\n`;\n\nexport default FocusVisible;\n\n/*input:focus ~ label {\n  top: -20px;\n  left: 0;\n  color: #03e9f4;\n  font-size: 12px;\n}*/","import React, { Component } from 'react';\nimport './form.css';\nimport axios from 'axios';\nimport FocusVisible from '../focus/focus'\n\n\nclass Form extends Component {\n\tconstructor(props){\n\t\tsuper (props);\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\temail: '',\n\t\t\tmessage: ''\n\t\t}\n \t}\n \tonNameChange(event) {\n \t\tthis.setState({name: event.target.value})\n \t}\n\n \tonEmailChange(event){\n \t\tthis.setState({email: event.target.value})\n \t}\n\n \tonMessageChange(event){\n \t\tthis.setState({message: event.target.value})\n \t}\n\n \tresetForm(){\n \t\tthis.setState({name:'', email:'', message: ''})\n \t}\n\n \thandleSubmit(event){\n \tevent.preventDefault();\n \tif(this.state.name==='' || this.state.message==='' || this.state.email===''){\n \t\talert(\"??\")\n \t} else {\n \t\taxios({\n \t\t\tmethod: \"POST\",\n \t\t\turl: \"https://landing-backend-m1doai1s6.vercel.app/send\",\n \t\t\tdata: this.state\n \t\t}).then((response) => {\n \t\t\tif(response.data.status === 'success'){\n \t\t\t\talert('Message sent');\n \t\t\t\tthis.resetForm()\n \t\t\t} else if(response.data.status === 'fail') {\n \t\t\t\talert('Message failed to send')\n \t\t\t}\n \t\t})\n \t}\n }\n\nrender(){\n\treturn (\n<FocusVisible className=\"js-focus-visible focus-visible\">\n\t<div className=\"form-box\">\n\t <form method=\"POST\" onSubmit={this.handleSubmit.bind(this)}> \n\t  <div className=\"user-box\">\n\t        <label>Your name</label>\n\t        <input\n\t            type=\"text\" required=\"\" \n\t            value={this.state.name}\n\t            onChange={this.onNameChange.bind(this)} />\n\t       \n\n\t  </div>\n\t  <div className=\"user-box\">\n\t         <label>Your email</label>\n\t       <input type=\"email\" \n\t             className=\"form-control\" \n\t             aria-describedby=\"emailHelp\" \n\t             value={this.state.email} \n\t             onChange={this.onEmailChange.bind(this)}/>\n\t      \n\t\t  </div>\n\t\t  <div className=\"user-box\">\n\t\t  \t   <textarea \n\t\t  \t   placeholder=\"Person of influence\" \n\t\t  \t   className=\"user-box\" \n\t\t  \t   rows=\"5\" \n\t\t  \t   value={this.state.message} \n\t\t  \t   onChange={this.onMessageChange.bind(this)} />\n\t\t  </div>\n\t\t  <div className=\"btn-wrapper\">\n\t\t    <button type=\"submit\" className=\"btn-submit\">Submit</button>\n\t\t  </div>\n\t </form>\n\t </div>\n\t </FocusVisible>\n\t)\n }\n}\nexport default Form;","import React, {Component} from 'react';\nimport Paragraph from './components/paragraph/paragraph';\nimport Form from './components/form/form';\n\nclass App extends Component {\n  render() {\n  return (\n  <div>\n   <Paragraph />\n    <Form />\n   </div>\n  )\n } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'focus-visible';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}